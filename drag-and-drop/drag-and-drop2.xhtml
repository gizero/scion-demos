<?xml version="1.0" encoding="utf-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<!--
This demo is like drag-and-drop.xhtml demo, except that it illustrates how one
may create state machines and DOM elements dynamically and procedurally, as
opposed to declaratively, as was done in the previous example. In this example,
each dynamically-created element will have its own state machine, hence its
own state.
-->

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg">
    <head>
        <style type="text/css">
            html, body {
                height:100%;
                margin: 0;
                padding: 0;
            }
        </style>
        <!-- we use jquery for jQuery.get and jQuery.globalEval (globalEval can optionally be used by the statechart) -->
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
        <script src="http://documentcloud.github.com/underscore/underscore-min.js"></script>
        <script src="https://raw.github.com/mckamey/jsonml/master/jsonml-dom.js"></script>
        <script type="text/javascript" src="http://jbeard4.github.com/SCION/builds/0.0.3/scion-min.js"></script>
    </head>
    <body>
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="99%" id="canvas"/>
        <button id="elementButton" style="position:absolute;bottom:0px;left:0px;">Make draggable SVG Element</button>
        <script><![CDATA[

            var scion = require('scion');

            var svgCanvas = document.getElementById("canvas"), 
                elementButton = document.getElementById("elementButton"),
                SVG_NS = "http://www.w3.org/2000/svg";

            //hook up minimal console api
            if(typeof console == "undefined"){
                console = {};
                ["log","info","error"].forEach(function(m){console[m] = console[m] || function(){} });
            } 

            //step 1 - get the scxml document
            jQuery.get("drag-and-drop2.xml" , function(scxmlToTransform, textStatus, jqXHR){

                console.log("scxmlToTransform",scxmlToTransform);

                //step 2 - transform scxmlToTransform to JSON
                var arr = JsonML.parseDOM(scxmlToTransform);
                var scxmlJson = arr[1];
                console.log("scxmlJson",scxmlJson);

                //step 3 - transform the parsed JSON model so it is friendlier to interpretation
                var annotatedScxmlJson = scion.annotator.transform(scxmlJson,true,true,true,true);
                console.log("annotatedScxmlJson",annotatedScxmlJson);

                //step 4 - initialize sc object model
                var model = scion.json2model(annotatedScxmlJson);
                console.log("model",model);

                //just for fun, random color generator, courtesy of http://stackoverflow.com/questions/1484506/random-color-generator-in-javascript
                function get_random_color() {
                    var letters = '0123456789ABCDEF'.split('');
                    var color = '#';
                    for (var i = 0; i < 6; i++ ) {
                        color += letters[Math.round(Math.random() * 15)];
                    }
                    return color;
                }

                //hook up button UI control
                var interpreters = [];
                elementButton.addEventListener("click",function(e){

                    //do DOM stuff- create new blue circle
                    var newGNode = document.createElementNS(SVG_NS,"g");
                    var newTextNode = document.createElementNS(SVG_NS,"text");
                    var newNode = document.createElementNS(SVG_NS,"circle");
                    newNode.setAttributeNS(null,"cx",50);
                    newNode.setAttributeNS(null,"cy",50);
                    newNode.setAttributeNS(null,"r",50);
                    newNode.setAttributeNS(null,"fill",get_random_color());
                    newNode.setAttributeNS(null,"stroke","black");

                    newGNode.appendChild(newNode);
                    newGNode.appendChild(newTextNode);

                    //step 5 - instantiate statechart
                    var interpreter = new scion.scxml.BrowserInterpreter(model,
                        {
                            //globalEval is used to execute any top-level script children of the scxml element
                            //use of jQuery's global-eval is optional
                            //TODO: cite that blog post about global-eval
                            globalEval : jQuery.globalEval  
                        });
                    console.log("interpreter",interpreter);

                    //step 6 - connect all relevant event listeners
                    newGNode.addEventListener("mousedown", function(e){
                        e.preventDefault();
                        interpreter.gen({name : "mousedown",data: e});
                    },false)

                    interpreters.push(interpreter); 

                    //step 7 - start statechart
                    interpreter.start()

                    //step 8 - initialize his variables by sending an "init" event and passing the nodes in as data
                    interpreter.gen({name : "init", data : {rawNode:newGNode,textNode:newTextNode}});

                    svgCanvas.appendChild(newGNode);
                },false);


                //the root element handles mousemove and mouseup events and dispatches the event to all individual statecharts
                ["mousemove","mouseup"].forEach(function(eventName){
                    document.documentElement.addEventListener( eventName, function(e){
                        e.preventDefault();
                        interpreters.forEach(function(interpreter){
                            interpreter.gen({name : eventName,data: e});
                        });
                    },true)
                });

            },"xml");
        ]]></script>
    </body>
</html>


